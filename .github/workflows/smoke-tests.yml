name: SmokeTests

on:
  push:
    branches: [ main ]

env:
  JAVA_VERSION: '11'
  JAVA_DISTRO: 'zulu'

permissions:
  contents: read
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  precheck:
    if: github.repository == 'jreleaser/jreleaser' && startsWith(github.event.head_commit.message, 'Releasing version') != true
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.vars.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Version
        id: vars
        shell: bash
        run: |
          version=$(cat VERSION)
          echo "VERSION=$(echo "$version")" >> $GITHUB_OUTPUT

  build-cli:
    needs: [ precheck ]
    if: endsWith(${{ needs.precheck.outputs.VERSION }}, '-SNAPSHOT')
    name: 'CLI ${{ matrix.job.os }}-${{ matrix.job.sign }}'
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: macos-latest  , sign: gpg   , args: '-xp docker' }
          - { os: macos-latest  , sign: cosign, args: '-xp docker' }
          - { os: ubuntu-latest , sign: gpg   , args: '' }
          - { os: ubuntu-latest , sign: cosign, args: '' }
          - { os: windows-latest, sign: gpg   , args: '-xp docker' }
          - { os: windows-latest, sign: cosign, args: '-xp docker' }
    runs-on: ${{ matrix.job.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Cache Gradle wrapper
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlew-${{ hashFiles('**/gradlew') }}
          restore-keys: ${{ runner.os }}-gradlew-

      - name: Build
        run: ./gradlew -Prelease=true -PreproducibleBuild=true build -S

      - name: Prepare
        shell: bash
        run: |
          unzip -qo plugins/jreleaser/build/distributions/jreleaser-${{ needs.precheck.outputs.VERSION }}.zip
          cp .github/test-files/jreleaser-${{ matrix.job.sign }}.yml jreleaser.yml
          sh .github/scripts/jacoco-instrument.sh

      - name: Assemble
        shell: bash
        run: |
          ./jreleaser-${{ needs.precheck.outputs.VERSION }}/bin/jreleaser assemble
        env:
          JRELEASER_PROJECT_VERSION: ${{ needs.precheck.outputs.VERSION }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          JAVA_OPTS: '-javaagent:jacoco/jacocoagent.jar=includes=*jreleaser*,destfile=jreleaser-cli-${{ runner.os }}-${{ matrix.job.sign }}.exec'

      - name: JReleaser assemble output
        if: always()
        uses: actions/upload-artifact@v3
        with:
          retention-days: 7
          name: 'jreleaser-assemble-cli-${{ runner.os }}-${{ matrix.job.sign }}'
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties

      - name: Full Release
        shell: bash
        run: |
          ./jreleaser-${{ needs.precheck.outputs.VERSION }}/bin/jreleaser full-release --dry-run ${{ matrix.job.args }}
        env:
          JRELEASER_PROJECT_VERSION: ${{ needs.precheck.outputs.VERSION }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
          JRELEASER_COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          JRELEASER_DOCKER_DEFAULT_PASSWORD: ${{ secrets.JRELEASER_DOCKER_PASSWORD }}
          JRELEASER_S3_JRELEASER_REGION: ${{ secrets.S3_REGION }}
          JRELEASER_S3_JRELEASER_BUCKET: ${{ secrets.S3_BUCKET }}
          JRELEASER_S3_JRELEASER_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
          JRELEASER_S3_JRELEASER_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
          JAVA_OPTS: '-javaagent:jacoco/jacocoagent.jar=includes=*jreleaser*,destfile=jreleaser-cli-${{ runner.os }}-${{ matrix.job.sign }}.exec'

      - name: JReleaser full-release output
        if: always()
        uses: actions/upload-artifact@v3
        with:
          retention-days: 7
          name: 'jreleaser-full-release-cli-${{ runner.os }}-${{ matrix.job.sign }}'
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties
            out/jreleaser/release/CHANGELOG.md
            out/jreleaser/prepare

      - name: JaCoCo upload
        if: always()
        uses: actions/upload-artifact@v3
        with:
          retention-days: 1
          name: jacoco
          path: '*.exec'

      - name: Cleanup cache
        if: always()
        shell: bash
        run: |
          rm -rf ~/.m2/repository/org/jreleaser
          rm -rf ~/.gradle/caches/modules-2/files-2.1/org.jreleaser

  build-ant:
    needs: [ precheck ]
    if: endsWith(${{ needs.precheck.outputs.VERSION }}, '-SNAPSHOT')
    name: 'Ant ${{ matrix.job.os }}-${{ matrix.job.sign }}'
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: macos-latest  , sign: gpg   ,  args: '-Djreleaser.excluded.packagers=docker' }
          - { os: macos-latest  , sign: cosign,  args: '-Djreleaser.excluded.packagers=docker' }
          - { os: ubuntu-latest , sign: gpg   ,  args: '' }
          - { os: ubuntu-latest , sign: cosign,  args: '' }
          - { os: windows-latest, sign: gpg   ,  args: '-Djreleaser.excluded.packagers=docker' }
          - { os: windows-latest, sign: cosign,  args: '-Djreleaser.excluded.packagers=docker' }
    runs-on: ${{ matrix.job.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Cache Gradle wrapper
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlew-${{ hashFiles('**/gradlew') }}
          restore-keys: ${{ runner.os }}-gradlew-

      - name: Build
        run: ./gradlew -Prelease=true -PreproducibleBuild=true build -S

      - name: Prepare
        shell: bash
        run: |
          cp .github/test-files/jreleaser-${{ matrix.job.sign }}.yml jreleaser.yml
          cp .github/test-files/build.xml build.xml
          sed -i -e "s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.VERSION }}/g" build.xml
          mkdir lib
          unzip -dlib -qo plugins/jreleaser-ant-tasks/build/distributions/jreleaser-ant-tasks-${{ needs.precheck.outputs.VERSION }}.zip
          sh .github/scripts/jacoco-instrument.sh

      - name: Assemble
        shell: bash
        run: |
          ant jreleaser-assemble
        env:
          JRELEASER_PROJECT_VERSION: ${{ needs.precheck.outputs.VERSION }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          JAVA_OPTS: '-javaagent:jacoco/jacocoagent.jar=includes=*jreleaser*,destfile=jreleaser-ant-${{ runner.os }}-${{ matrix.job.sign }}.exec'

      - name: JReleaser assemble output
        if: always()
        uses: actions/upload-artifact@v3
        with:
          retention-days: 7
          name: 'jreleaser-assemble-ant-${{ runner.os }}-${{ matrix.job.sign }}'
          path: |
            build/jreleaser/trace.log
            build/jreleaser/output.properties

      - name: Full Release
        shell: bash
        run: |
          ant ${{ matrix.job.args }} jreleaser-full-release
        env:
          JRELEASER_PROJECT_VERSION: ${{ needs.precheck.outputs.VERSION }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
          JRELEASER_COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          JRELEASER_DOCKER_DEFAULT_PASSWORD: ${{ secrets.JRELEASER_DOCKER_PASSWORD }}
          JRELEASER_S3_JRELEASER_REGION: ${{ secrets.S3_REGION }}
          JRELEASER_S3_JRELEASER_BUCKET: ${{ secrets.S3_BUCKET }}
          JRELEASER_S3_JRELEASER_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
          JRELEASER_S3_JRELEASER_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
          JAVA_OPTS: '-javaagent:jacoco/jacocoagent.jar=includes=*jreleaser*,destfile=jreleaser-ant-${{ runner.os }}-${{ matrix.job.sign }}.exec'

      - name: JReleaser full-release output
        if: always()
        uses: actions/upload-artifact@v3
        with:
          retention-days: 7
          name: 'jreleaser-full-release-ant-${{ runner.os }}-${{ matrix.job.sign }}'
          path: |
            build/jreleaser/trace.log
            build/jreleaser/output.properties
            build/jreleaser/release/CHANGELOG.md
            build/jreleaser/prepare

      - name: JaCoCo upload
        if: always()
        uses: actions/upload-artifact@v3
        with:
          retention-days: 1
          name: jacoco
          path: '*.exec'

      - name: Cleanup cache
        if: always()
        shell: bash
        run: |
          rm -rf ~/.m2/repository/org/jreleaser
          rm -rf ~/.gradle/caches/modules-2/files-2.1/org.jreleaser

  build-gradle:
    needs: [ precheck ]
    if: endsWith(${{ needs.precheck.outputs.VERSION }}, '-SNAPSHOT')
    name: 'Gradle ${{ matrix.job.os }}-${{ matrix.job.sign }}'
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: macos-latest  , sign: gpg   ,  args: '--exclude-packager docker' }
          - { os: macos-latest  , sign: cosign,  args: '--exclude-packager docker' }
          - { os: ubuntu-latest , sign: gpg   ,  args: '' }
          - { os: ubuntu-latest , sign: cosign,  args: '' }
          - { os: windows-latest, sign: gpg   ,  args: '--exclude-packager docker' }
          - { os: windows-latest, sign: cosign,  args: '--exclude-packager docker' }
    runs-on: ${{ matrix.job.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Cache Gradle wrapper
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlew-${{ hashFiles('**/gradlew') }}
          restore-keys: ${{ runner.os }}-gradlew-

      - name: Build
        run: ./gradlew -Prelease=true -PreproducibleBuild=true clean build publishToMavenLocal -S

      - name: Prepare
        shell: bash
        run: |
          cp .github/test-files/gradle.properties gradle.properties
          cp .github/test-files/settings.gradle settings.gradle
          cp .github/test-files/build-${{ matrix.job.sign }}.gradle build.gradle
          sed -i -e "s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.VERSION }}/g" settings.gradle
          sed -i -e "s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.VERSION }}/g" gradle.properties
          sh .github/scripts/jacoco-instrument.sh

      - name: Assemble
        shell: bash
        run: |
          ./gradlew jreleaserAssemble
        env:
          JRELEASER_PROJECT_VERSION: ${{ needs.precheck.outputs.VERSION }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          JAVA_OPTS: '-javaagent:jacoco/jacocoagent.jar=includes=*jreleaser*,destfile=jreleaser-gradle-${{ runner.os }}-${{ matrix.job.sign }}.exec'

      - name: JReleaser assemble output
        if: always()
        uses: actions/upload-artifact@v3
        with:
          retention-days: 7
          name: 'jreleaser-assemble-gradle-${{ runner.os }}-${{ matrix.job.sign }}'
          path: |
            build/jreleaser/trace.log
            build/jreleaser/output.properties

      - name: Full Release
        shell: bash
        run: |
          ./gradlew jreleaserFullRelease ${{ matrix.job.args }}
        env:
          JRELEASER_PROJECT_VERSION: ${{ needs.precheck.outputs.VERSION }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
          JRELEASER_COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          JRELEASER_DOCKER_DEFAULT_PASSWORD: ${{ secrets.JRELEASER_DOCKER_PASSWORD }}
          JRELEASER_S3_JRELEASER_REGION: ${{ secrets.S3_REGION }}
          JRELEASER_S3_JRELEASER_BUCKET: ${{ secrets.S3_BUCKET }}
          JRELEASER_S3_JRELEASER_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
          JRELEASER_S3_JRELEASER_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
          JAVA_OPTS: '-javaagent:jacoco/jacocoagent.jar=includes=*jreleaser*,destfile=jreleaser-gradle-${{ runner.os }}-${{ matrix.job.sign }}.exec'

      - name: JReleaser full-release output
        if: always()
        uses: actions/upload-artifact@v3
        with:
          retention-days: 7
          name: 'jreleaser-full-release-gradle-${{ runner.os }}-${{ matrix.job.sign }}'
          path: |
            build/jreleaser/trace.log
            build/jreleaser/output.properties
            build/jreleaser/release/CHANGELOG.md
            build/jreleaser/prepare

      - name: Clean
        shell: bash
        run: |
          ./gradlew clean -S
        env:
          JRELEASER_PROJECT_VERSION: ${{ needs.precheck.outputs.VERSION }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
          JRELEASER_COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          JRELEASER_DOCKER_DEFAULT_PASSWORD: ${{ secrets.JRELEASER_DOCKER_PASSWORD }}
          JRELEASER_S3_JRELEASER_REGION: ${{ secrets.S3_REGION }}
          JRELEASER_S3_JRELEASER_BUCKET: ${{ secrets.S3_BUCKET }}
          JRELEASER_S3_JRELEASER_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
          JRELEASER_S3_JRELEASER_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}

      - name: JaCoCo upload
        if: always()
        uses: actions/upload-artifact@v3
        with:
          retention-days: 1
          name: jacoco
          path: '*.exec'

      - name: Cleanup cache
        if: always()
        shell: bash
        run: |
          rm -rf ~/.m2/repository/org/jreleaser
          rm -rf ~/.gradle/caches/modules-2/files-2.1/org.jreleaser

  build-maven:
    needs: [ precheck ]
    if: endsWith(${{ needs.precheck.outputs.VERSION }}, '-SNAPSHOT')
    name: 'Maven ${{ matrix.job.os }}-${{ matrix.job.sign }}'
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: macos-latest  , sign: gpg   ,  args: '-Djreleaser.excluded.packagers=docker' }
          - { os: macos-latest  , sign: cosign,  args: '-Djreleaser.excluded.packagers=docker' }
          - { os: ubuntu-latest , sign: gpg   ,  args: '' }
          - { os: ubuntu-latest , sign: cosign,  args: '' }
          - { os: windows-latest, sign: gpg   ,  args: '-Djreleaser.excluded.packagers=docker' }
          - { os: windows-latest, sign: cosign,  args: '-Djreleaser.excluded.packagers=docker' }
    runs-on: ${{ matrix.job.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Cache Gradle wrapper
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlew-${{ hashFiles('**/gradlew') }}
          restore-keys: ${{ runner.os }}-gradlew-

      - name: Build
        run: ./gradlew -Prelease=true -PreproducibleBuild=true clean build publishToMavenLocal -S

      - name: Prepare
        shell: bash
        run: |
          cp .github/test-files/pom-${{ matrix.job.sign }}.xml pom.xml
          sed -i -e "s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.VERSION }}/g" pom.xml
          sh .github/scripts/jacoco-instrument.sh

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Assemble
        shell: bash
        run: |
          mvn -B jreleaser:assemble
        env:
          JRELEASER_PROJECT_VERSION: ${{ needs.precheck.outputs.VERSION }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          JAVA_OPTS: '-javaagent:jacoco/jacocoagent.jar=includes=*jreleaser*,destfile=jreleaser-maven-${{ runner.os }}-${{ matrix.job.sign }}.exec'

      - name: JReleaser assemble output
        if: always()
        uses: actions/upload-artifact@v3
        with:
          retention-days: 7
          name: 'jreleaser-assemble-maven-${{ runner.os }}-${{ matrix.job.sign }}'
          path: |
            target/jreleaser/trace.log
            target/jreleaser/output.properties

      - name: Full Release
        shell: bash
        run: |
          mvn -B -Djreleaser.dry.run=true ${{ matrix.job.args }} jreleaser:full-release
        env:
          JRELEASER_PROJECT_VERSION: ${{ needs.precheck.outputs.VERSION }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
          JRELEASER_COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          JRELEASER_DOCKER_DEFAULT_PASSWORD: ${{ secrets.JRELEASER_DOCKER_PASSWORD }}
          JRELEASER_S3_JRELEASER_REGION: ${{ secrets.S3_REGION }}
          JRELEASER_S3_JRELEASER_BUCKET: ${{ secrets.S3_BUCKET }}
          JRELEASER_S3_JRELEASER_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
          JRELEASER_S3_JRELEASER_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
          JAVA_OPTS: '-javaagent:jacoco/jacocoagent.jar=includes=*jreleaser*,destfile=jreleaser-maven-${{ runner.os }}-${{ matrix.job.sign }}.exec'

      - name: JReleaser full-release output
        if: always()
        uses: actions/upload-artifact@v3
        with:
          retention-days: 7
          name: 'jreleaser-full-release-maven-${{ runner.os }}-${{ matrix.job.sign }}'
          path: |
            target/jreleaser/trace.log
            target/jreleaser/output.properties
            target/jreleaser/release/CHANGELOG.md
            target/jreleaser/prepare

      - name: JaCoCo upload
        if: always()
        uses: actions/upload-artifact@v3
        with:
          retention-days: 1
          name: jacoco
          path: '*.exec'

      - name: Cleanup cache
        if: always()
        shell: bash
        run: |
          rm -rf ~/.m2/repository/org/jreleaser
          rm -rf ~/.gradle/caches/modules-2/files-2.1/org.jreleaser

  unit-tests:
    needs: [ precheck ]
    if: endsWith(${{ needs.precheck.outputs.VERSION }}, '-SNAPSHOT')
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Cache Gradle wrapper
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlew-${{ hashFiles('**/gradlew') }}
          restore-keys: ${{ runner.os }}-gradlew-

      - name: Test
        run: |
          ./gradlew test pitest jacocoTestReport
          ./gradlew :aggregateJacocoReport

      - name: Rename JaCoCo execution data
        shell: bash
        run: |
          mv build/jacoco/aggregate.exec aggregate-${{ runner.os }}.exec

      - name: JaCoCo upload
        if: always()
        uses: actions/upload-artifact@v3
        with:
          retention-days: 1
          name: jacoco
          path: '*.exec'

  jacoco:
    needs: [ build-cli, build-ant, build-gradle, build-maven, unit-tests ]
    if: endsWith(${{ needs.precheck.outputs.VERSION }}, '-SNAPSHOT')
    name: Jacoco
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Cache Gradle wrapper
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlew-${{ hashFiles('**/gradlew') }}
          restore-keys: ${{ runner.os }}-gradlew-

      - name: Build
        run: ./gradlew classes
        
      - name: Download JaCoCo execution data
        uses: actions/download-artifact@v3
        with:
          name: jacoco
          path: jacoco

      - name: JaCoCo merge
        run: sh .github/scripts/jacoco-merge.sh

      - name: JaCoCo report
        run: sh .github/scripts/jacoco-report.sh

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: build/reports/jacoco/aggregate/jacocoTestReport.xml
          flags: smoke-tests
          fail_ci_if_error: false
          name: jreleaser-smoke-tests
          verbose: true

      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@1.1.3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          flaf-name: Integration
          path-to-lcov: build/reports/jacoco/aggregate/jacocoTestReport.xml

      - name: Cleanup build-cache
        if: always()
        shell: bash
        run: |
          rm -rf ~/.gradle/caches/build-cache-1
