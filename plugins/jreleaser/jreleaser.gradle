/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2020-2024 The JReleaser authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'application'
    id 'org.jreleaser.jdks'
}

application {
    mainClass = 'org.jreleaser.cli.Main'
}

jar {
    manifest {
        attributes([
            'Main-Class': 'org.jreleaser.cli.Main',
            'Automatic-Module-Name': project.findProperty('automatic.module.name')
        ])
    }
}

startScripts {
    classpath = files('$APP_HOME/lib/*')
}

config {
    info {
        specification { enabled = true }
    }
}

configurations {
    graalvm
}

dependencies {
    api project(':jreleaser-engine')
    graalvm project(':jreleaser-graalvm-sdk')
    //config
    api project(':jreleaser-config-yaml')
    api project(':jreleaser-config-toml')
    api project(':jreleaser-config-json')

    annotationProcessor "info.picocli:picocli-codegen:$picocliVersion"
    api "info.picocli:picocli:$picocliVersion"
    runtimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"
}

processResources {
    inputs.property('version', project.version)
    filesMatching(['**/Banner*.properties']) {
        expand(
            'version': project.version,
            'id': 'jreleaser',
            'name': 'jreleaser'
        )
    }
}

distributions {
    main {
        contents {
            from('../..') {
                include 'licenses/*'
                include 'LICENSE'
                include 'NOTICE'
                include 'VERSION'
            }
        }
    }
}

jdks {
    zulu17Linux {
        platform = 'linux-x86_64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-linux_x64.zip'
        checksum = 'c89977771091eb7d53e0f244a722076e88d968966b75aba2a65a1b31105d68bb'
    }
    zulu17LinuxArm {
        platform = 'linux-aarch64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-linux_aarch64.tar.gz'
        checksum = '518cc455c0c7b49c0ae7d809c0bb87ab371bb850d46abb8efad5010c6a06faec'
    }
    zulu17LinuxMusl {
        platform = 'linux_musl-x86_64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-linux_musl_x64.tar.gz'
        checksum = '22bbde6e05ced1238b302e2b44d3f9785c23e4115618eea83786b6b4a1828f9f'
    }
    zulu17LinuxMuslArm {
        platform = 'linux_musl-aarch64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-linux_musl_aarch64.tar.gz'
        checksum = 'fc6645aa46736e6100302c109127ea31a1d1192599b7140dd94f81eaeebfe293'
    }
    zulu17Windows {
        platform = 'windows-x86_64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-win_x64.zip'
        checksum = '43f0f1bdecf48ba9763d46ee7784554c95b442ffdd39ebd62dc8b297cc82e116'
    }
    zulu17WindowsArm {
        platform = 'windows-aarch64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-win_aarch64.zip'
        checksum = 'b8833d272eb31f54f8c881139807a28a74de9deae07d2cc37688ff72043e32c9'
    }
    zulu17Osx {
        platform = 'osx-x86_64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-macosx_x64.zip'
        checksum = '3f653ad00a29b3ae2abebcfc598225f674d3289e52497b310441f3fb5d785f8a'
    }
    zulu17OsxArm {
        platform = 'osx-aarch64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.50.19-ca-jdk17.0.11-macosx_aarch64.zip'
        checksum = '5aec103fc90131dc34cb1be6290dd61c426a74f1bf7e8b4895049cd27fee70a8'
    }
    graal22Osx {
        platform = 'osx-x86_64'
        url = 'https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-22.0.1/graalvm-community-jdk-22.0.1_macos-x64_bin.tar.gz'
        checksum = '553c2dff3febd45f917e45f4dd620c194d8225bc28d13f5545ddffea9eeb30f8'
    }
    graal22OsxArm {
        platform = 'osx-aarch64'
        url = 'https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-22.0.1/graalvm-community-jdk-22.0.1_macos-aarch64_bin.tar.gz'
        checksum = 'b96a16359c800374af5fbd3cb685aaa91cfc590ea4be35538c24b37e12c769c0'
    }
    graal22Linux {
        platform = 'linux-x86_64'
        url = 'https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-22.0.1/graalvm-community-jdk-22.0.1_linux-x64_bin.tar.gz'
        checksum = 'e34ec7e8e8c6a4bb99ab4fa32c3e04d01f2f2bd88920ddda7545fd35a0511f75'
    }
    graal22Windows {
        platform = 'windows-x86_64'
        url = 'https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-22.0.1/graalvm-community-jdk-22.0.1_windows-x64_bin.zip'
        checksum = '623a4c5984f1210e61346e3ff942ec6f83d1928790ef9ae7dd28067e5c8de1aa'
    }
}

copyDependencies {
    dependsOn classes
    inputs.files(configurations.runtimeClasspath)
    configuration = 'runtimeClasspath'
}

assemble.dependsOn(copyDependencies, tasks.register('copyGraalvmJavaSdk', Copy) { t->
    t.from configurations.graalvm
    t.into 'build/dependencies/graalvm'
})

afterEvaluate {
    def copyJdksToCache = project.tasks.findByName('copyJdksToCache')
    ['zulu17Linux', 'zulu17LinuxArm', 'zulu17LinuxMusl', 'zulu17LinuxMuslArm',
     'zulu17Windows', 'zulu17WindowsArm', 'zulu17Osx', 'zulu17OsxArm',
     'graal22Osx', 'graal22OsxArm', 'graal22Linux', 'graal22Windows'].each { jdk ->
        def copyTask = project.tasks.findByName('copyJdkFromCache' + jdk.capitalize())
        if (copyJdksToCache && copyTask) copyTask.dependsOn(copyJdksToCache)
    }
}