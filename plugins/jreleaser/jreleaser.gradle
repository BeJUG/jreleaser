/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2020-2024 The JReleaser authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'application'
    id 'org.jreleaser.jdks'
}

application {
    mainClass = 'org.jreleaser.cli.Main'
}

jar {
    manifest {
        attributes([
            'Main-Class': 'org.jreleaser.cli.Main',
            'Automatic-Module-Name': project.findProperty('automatic.module.name')
        ])
    }
}

startScripts {
    classpath = files('$APP_HOME/lib/*')
}

config {
    info {
        specification { enabled = true }
    }
}

configurations {
    graalvm
}

dependencies {
    api project(':jreleaser-engine')
    graalvm project(':jreleaser-graalvm-sdk')
    //config
    api project(':jreleaser-config-yaml')
    api project(':jreleaser-config-toml')
    api project(':jreleaser-config-json')

    annotationProcessor "info.picocli:picocli-codegen:$picocliVersion"
    api "info.picocli:picocli:$picocliVersion"
    runtimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"
}

processResources {
    inputs.property('version', project.version)
    filesMatching(['**/Banner*.properties']) {
        expand(
            'version': project.version,
            'id': 'jreleaser',
            'name': 'jreleaser'
        )
    }
}

distributions {
    main {
        contents {
            from('../..') {
                include 'licenses/*'
                include 'LICENSE'
                include 'NOTICE'
                include 'VERSION'
            }
        }
    }
}

jdks {
    zulu17Linux {
        platform = 'linux-x86_64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.52.17-ca-jdk17.0.12-linux_x64.zip'
        checksum = '0c197e99ecf2a282cb695947761ab2eee2b1293c8a101a5ca86366fedfc1730d'
    }
    zulu17LinuxArm {
        platform = 'linux-aarch64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.52.17-ca-jdk17.0.12-linux_aarch64.tar.gz'
        checksum = 'b88cf60f95a3ab24b2e65a1bbaf5a9de41531ac04a857cd3e7a420086c97c126'
    }
    zulu17LinuxMusl {
        platform = 'linux_musl-x86_64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.52.17-ca-jdk17.0.12-linux_musl_x64.tar.gz'
        checksum = '1bb9bedde3095d88fd216b9be112b59a8400f0e4d991243ce70be3b0518bcc7a'
    }
    zulu17LinuxMuslArm {
        platform = 'linux_musl-aarch64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.52.17-ca-jdk17.0.12-linux_musl_aarch64.tar.gz'
        checksum = '43efd90828038f6dcd941240d7e16719ef091146d137721e66ceefdb6c70ad66'
    }
    zulu17Windows {
        platform = 'windows-x86_64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.52.17-ca-jdk17.0.12-win_x64.zip'
        checksum = 'c0d9b0e02a92e4d919e0998970186983c745bdf2b0fe0b35b7d913acec9e502d'
    }
    zulu17WindowsArm {
        platform = 'windows-aarch64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.52.17-ca-jdk17.0.12-win_aarch64.zip'
        checksum = '907512ede5182993b3353608a89d4b0a78bf99fe60df7a76e1ad559c93c622b1'
    }
    zulu17Osx {
        platform = 'osx-x86_64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.52.17-ca-jdk17.0.12-macosx_x64.zip'
        checksum = 'f85ad0adc818d9071028c0c2bfa6c288894512d86764169f5f208027589a8665'
    }
    zulu17OsxArm {
        platform = 'osx-aarch64'
        url = 'https://cdn.azul.com/zulu/bin/zulu17.52.17-ca-jdk17.0.12-macosx_aarch64.zip'
        checksum = '863cb9e0d1ff696a9a2354d2b208a70d8a854df52460d6eb88279368e1cc36f9'
    }
    graal22Osx {
        platform = 'osx-x86_64'
        url = 'https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-23.0.0/graalvm-community-jdk-23.0.0_macos-x64_bin.tar.gz'
        checksum = '1338b838e5c845688643ed9e91bf2a0236e4d53bf1dc9cb4f693bde0409d4daa'
    }
    graal22OsxArm {
        platform = 'osx-aarch64'
        url = 'https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-23.0.0/graalvm-community-jdk-23.0.0_macos-aarch64_bin.tar.gz'
        checksum = 'cda587f6d15134dc237fbb1111c7e339c8a0b2f4c1a4817a436c7c15d8ba2a9b'
    }
    graal22Linux {
        platform = 'linux-x86_64'
        url = 'https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-23.0.0/graalvm-community-jdk-23.0.0_linux-x64_bin.tar.gz'
        checksum = '440eb64bf548f37086f97d236a028d0a6ccf5cee9ed9caed2f70ded5a68312a0'
    }
    graal22Windows {
        platform = 'windows-x86_64'
        url = 'https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-23.0.0/graalvm-community-jdk-23.0.0_windows-x64_bin.zip'
        checksum = 'ef0e28d9ccdf68e31c911ec2069e010f35f1b484e6f70a4a6cce098f8bf8247e'
    }
}

copyDependencies {
    dependsOn classes
    inputs.files(configurations.runtimeClasspath)
    configuration = 'runtimeClasspath'
}

assemble.dependsOn(copyDependencies, tasks.register('copyGraalvmJavaSdk', Copy) { t->
    t.from configurations.graalvm
    t.into 'build/dependencies/graalvm'
})

afterEvaluate {
    def copyJdksToCache = project.tasks.findByName('copyJdksToCache')
    ['zulu17Linux', 'zulu17LinuxArm', 'zulu17LinuxMusl', 'zulu17LinuxMuslArm',
     'zulu17Windows', 'zulu17WindowsArm', 'zulu17Osx', 'zulu17OsxArm',
     'graal22Osx', 'graal22OsxArm', 'graal22Linux', 'graal22Windows'].each { jdk ->
        def copyTask = project.tasks.findByName('copyJdkFromCache' + jdk.capitalize())
        if (copyJdksToCache && copyTask) copyTask.dependsOn(copyJdksToCache)
    }
}